
"use client";

import { useState, useEffect } from "react";
import { PageHeader } from "@/components/shared/page-header";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { Loader2, Wand2, Info, History, CornerDownRight, FileText } from "lucide-react";
import { generateRadiusPacket, GenerateRadiusPacketInput, GenerateRadiusPacketOutput } from "@/ai/flows/generate-radius-packet";
import { explainRadiusAttribute, ExplainRadiusAttributeInput, ExplainRadiusAttributeOutput } from "@/ai/flows/explain-radius-attribute";
import { useToast } from "@/hooks/use-toast";
import type { AiInteraction } from "@/app/api/ai-interactions/route"; // Import AiInteraction type
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { format } from "date-fns";


export default function AiAssistantPage() {
  const [vendor, setVendor] = useState("");
  const [packetType, setPacketType] = useState("");
  const [context, setContext] = useState("");
  const [generatedPacket, setGeneratedPacket] = useState<GenerateRadiusPacketOutput | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);

  const [attributeName, setAttributeName] = useState("");
  const [attributeVendor, setAttributeVendor] = useState("");
  const [explainedAttribute, setExplainedAttribute] = useState<ExplainRadiusAttributeOutput | null>(null);
  const [isExplaining, setIsExplaining] = useState(false);

  const [interactionsHistory, setInteractionsHistory] = useState<AiInteraction[]>([]);
  const [isLoadingHistory, setIsLoadingHistory] = useState(false);

  const { toast } = useToast();

  const fetchInteractionsHistory = async () => {
    setIsLoadingHistory(true);
    try {
      const response = await fetch('/api/ai-interactions');
      if (!response.ok) throw new Error('Failed to fetch AI interactions history');
      const data = await response.json();
      setInteractionsHistory(data);
    } catch (error) {
      console.error("Error fetching AI interactions history:", error);
      toast({ title: "Error", description: "Could not load AI interaction history.", variant: "destructive" });
    } finally {
      setIsLoadingHistory(false);
    }
  };

  useEffect(() => {
    fetchInteractionsHistory();
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const saveInteraction = async (type: 'generate_packet' | 'explain_attribute', input: any, output: any) => {
    try {
      await fetch('/api/ai-interactions', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ interactionType: type, userInput: input, aiOutput: output }),
      });
      fetchInteractionsHistory(); // Refresh history after saving
    } catch (error) {
      console.error("Error saving AI interaction:", error);
      // Optionally show a non-blocking toast for save failure
    }
  };

  const handleGeneratePacket = async () => {
    if (!vendor || !packetType) {
      toast({
        title: "Missing Fields",
        description: "Please enter Vendor and Packet Type.",
        variant: "destructive",
      });
      return;
    }
    setIsGenerating(true);
    setGeneratedPacket(null);
    try {
      const input: GenerateRadiusPacketInput = { vendor, packetType, context };
      const result = await generateRadiusPacket(input);
      setGeneratedPacket(result);
      toast({
        title: "Packet Generated",
        description: "RADIUS packet successfully generated by AI.",
      });
      await saveInteraction('generate_packet', input, result);
    } catch (error) {
      console.error("Error generating packet:", error);
      toast({
        title: "Generation Failed",
        description: "Could not generate RADIUS packet. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const handleExplainAttribute = async () => {
    if (!attributeName) {
      toast({
        title: "Missing Field",
        description: "Please enter Attribute Name.",
        variant: "destructive",
      });
      return;
    }
    setIsExplaining(true);
    setExplainedAttribute(null);
    try {
      const input: ExplainRadiusAttributeInput = { attributeName, vendor: attributeVendor || undefined };
      const result = await explainRadiusAttribute(input);
      setExplainedAttribute(result);
      toast({
        title: "Attribute Explained",
        description: "RADIUS attribute explanation provided by AI.",
      });
      await saveInteraction('explain_attribute', input, result);
    } catch (error) {
      console.error("Error explaining attribute:", error);
      toast({
        title: "Explanation Failed",
        description: "Could not explain RADIUS attribute. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsExplaining(false);
    }
  };

  const renderInteractionDetail = (interaction: AiInteraction) => {
    const userInput = JSON.parse(interaction.userInput);
    const aiOutput = JSON.parse(interaction.aiOutput);

    if (interaction.interactionType === 'generate_packet') {
      return (
        <>
          <p className="text-xs"><strong>Input:</strong> Vendor: {userInput.vendor}, Type: {userInput.packetType}, Context: {userInput.context || 'N/A'}</p>
          <div className="mt-1 p-2 border rounded-md bg-background text-xs">
            <p className="font-semibold">Generated Packet:</p>
            <pre className="whitespace-pre-wrap">{aiOutput.packetData}</pre>
          </div>
        </>
      );
    } else if (interaction.interactionType === 'explain_attribute') {
      return (
         <>
          <p className="text-xs"><strong>Input:</strong> Attribute: {userInput.attributeName}, Vendor: {userInput.vendor || 'N/A'}</p>
          <div className="mt-1 p-2 border rounded-md bg-background text-xs">
             <p className="font-semibold">Explanation:</p>
             <p className="whitespace-pre-wrap">{aiOutput.explanation}</p>
          </div>
        </>
      );
    }
    return null;
  };


  return (
    <div className="space-y-8">
      <PageHeader
        title="AI Packet Assistant"
        description="Leverage AI to generate realistic RADIUS packets and understand attributes."
      />

      <div className="grid lg:grid-cols-3 gap-8">
        <div className="lg:col-span-2 grid md:grid-cols-2 gap-8">
            <Card className="shadow-lg">
            <CardHeader>
                <CardTitle className="flex items-center gap-2"><Wand2 className="h-5 w-5 text-primary" />Generate RADIUS Packet</CardTitle>
                <CardDescription>
                Provide vendor, packet type, and optional context to generate a packet.
                </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
                <div>
                <Label htmlFor="vendor">Vendor (e.g., 3GPP, Cisco)</Label>
                <Input id="vendor" value={vendor} onChange={(e) => setVendor(e.target.value)} placeholder="Cisco" />
                </div>
                <div>
                <Label htmlFor="packetType">Packet Type (e.g., Access-Request)</Label>
                <Input id="packetType" value={packetType} onChange={(e) => setPacketType(e.target.value)} placeholder="Access-Request" />
                </div>
                <div>
                <Label htmlFor="context">Additional Context (Optional)</Label>
                <Textarea id="context" value={context} onChange={(e) => setContext(e.target.value)} placeholder="Simulate a VoIP call setup" />
                </div>
                <Button onClick={handleGeneratePacket} disabled={isGenerating} className="w-full">
                {isGenerating ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Wand2 className="mr-2 h-4 w-4" />}
                Generate Packet
                </Button>
                {generatedPacket && (
                <div className="mt-6 space-y-4 p-4 border rounded-md bg-muted/50">
                    <h3 className="text-lg font-semibold">Generated Packet:</h3>
                    <pre className="text-sm bg-background p-3 rounded-md overflow-x-auto">{generatedPacket.packetData}</pre>
                    <h3 className="text-lg font-semibold">Explanation:</h3>
                    <p className="text-sm">{generatedPacket.explanation}</p>
                </div>
                )}
            </CardContent>
            </Card>

            <Card className="shadow-lg">
            <CardHeader>
                <CardTitle className="flex items-center gap-2"><Info className="h-5 w-5 text-primary" />Explain RADIUS Attribute</CardTitle>
                <CardDescription>
                Enter an attribute name and optional vendor to get an explanation.
                </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
                <div>
                <Label htmlFor="attributeName">Attribute Name</Label>
                <Input id="attributeName" value={attributeName} onChange={(e) => setAttributeName(e.target.value)} placeholder="User-Name" />
                </div>
                <div>
                <Label htmlFor="attributeVendor">Vendor (Optional)</Label>
                <Input id="attributeVendor" value={attributeVendor} onChange={(e) => setAttributeVendor(e.target.value)} placeholder="FreeRADIUS" />
                </div>
                <Button onClick={handleExplainAttribute} disabled={isExplaining} className="w-full">
                {isExplaining ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <Info className="mr-2 h-4 w-4" />}
                Explain Attribute
                </Button>
                {explainedAttribute && (
                <div className="mt-6 p-4 border rounded-md bg-muted/50">
                    <h3 className="text-lg font-semibold">Attribute Explanation:</h3>
                    <p className="text-sm whitespace-pre-wrap">{explainedAttribute.explanation}</p>
                </div>
                )}
            </CardContent>
            </Card>
        </div>
        
        <Card className="shadow-lg lg:col-span-1 h-full flex flex-col">
          <CardHeader>
            <CardTitle className="flex items-center gap-2"><History className="h-5 w-5 text-primary" />Interaction History</CardTitle>
            <CardDescription>Recent AI generations and explanations.</CardDescription>
          </CardHeader>
          <CardContent className="flex-grow overflow-hidden p-0">
            <ScrollArea className="h-full p-4">
              {isLoadingHistory ? (
                <div className="flex items-center justify-center h-full">
                  <Loader2 className="h-6 w-6 animate-spin text-muted-foreground" />
                  <p className="ml-2 text-muted-foreground">Loading history...</p>
                </div>
              ) : interactionsHistory.length === 0 ? (
                <p className="text-sm text-muted-foreground text-center py-10">No interaction history yet.</p>
              ) : (
                <ul className="space-y-4">
                  {interactionsHistory.map((interaction) => (
                    <li key={interaction.id} className="p-3 border rounded-md bg-muted/30 hover:bg-muted/50 transition-colors">
                      <div className="flex justify-between items-center mb-1">
                        <div className="flex items-center gap-2">
                            {interaction.interactionType === 'generate_packet' ? <FileText className="h-4 w-4 text-blue-500"/> : <Info className="h-4 w-4 text-green-500"/>}
                            <span className="text-sm font-medium capitalize">
                            {interaction.interactionType.replace('_', ' ')}
                            </span>
                        </div>
                        <Badge variant="outline" className="text-xs">{format(new Date(interaction.timestamp), "MMM d, HH:mm")}</Badge>
                      </div>
                      {renderInteractionDetail(interaction)}
                    </li>
                  ))}
                </ul>
              )}
            </ScrollArea>
          </CardContent>
           <CardFooter className="text-xs text-muted-foreground p-4 border-t">
             Displaying last {interactionsHistory.length} interactions.
           </CardFooter>
        </Card>
      </div>
    </div>
  );
}
